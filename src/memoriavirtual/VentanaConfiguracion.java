/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package memoriavirtual;

import static java.lang.Math.pow;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Jespi_000
 */
public class VentanaConfiguracion extends javax.swing.JFrame {

    private static void CargarMemoriaVirtual() {
        for (Proceso p : Main.lista_Procesos){
            int partes = (p.tamano/1048576)+1; //1048576 = tamaño en bytes de un MB
            p.num_pags = partes;
            int num_pag = 1;
            //System.out.println("Proceso: "+p.nombre+", partes = "+partes);
            while (!(partes==0)){
                Frame f = new Frame(p);
                f.identificador = num_pag;
                Main.memoria_virtual.add(f);
                //System.out.println("    Frame del Proceso: "+f.contenido.nombre+", num pag = "+num_pag);
                partes--;
                num_pag++;
            }
        }
    }


    /**
     * Creates new form VentanaConfiguracion
     */
    public VentanaConfiguracion() {
        initComponents();
        PanelWorkingSetVariable.setVisible(false);
        PanelWorkingSetFijo.setVisible(false);
        this.setLocationRelativeTo(null);
        this.getRootPane().setDefaultButton(BotonContinuar);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LBienvenido = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        FetchPolicyComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        PlacementPolicyComboBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        ReplacementPolicyComboBox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        ResidentSetManagementComboBox = new javax.swing.JComboBox();
        PanelWorkingSetVariable = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        FieldCrecimientoPorIteracion = new javax.swing.JTextField();
        FieldTamanoMaximo = new javax.swing.JTextField();
        FieldTamanoInicial = new javax.swing.JTextField();
        PanelWorkingSetFijo = new javax.swing.JPanel();
        FieldTamanoFijo = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        ReplacementScopeComboBox = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        CleaningPolicyComboBox = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        FieldGradoDeMultiprogramacion = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        ProcessSelectionPolicyComboBox = new javax.swing.JComboBox();
        BotonContinuar = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel17 = new javax.swing.JLabel();
        FieldTamanoMemFisica = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        FieldCantidadBitsReferencias = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        FieldCantidadReferenciasPorIteracion = new javax.swing.JTextField();
        menu = new javax.swing.JMenuBar();
        Ayuda = new javax.swing.JMenu();
        General = new javax.swing.JMenuItem();
        Creditos = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LBienvenido.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        LBienvenido.setText("¡Bienvenido a MemoVirt!");
        LBienvenido.setName(""); // NOI18N

        jLabel2.setText("A continuación, se le solicita la configuración del sistema de memoria virtual.");

        jLabel3.setText("Recuerde que debe seleccionar cada opción que pueda editar.");

        jLabel1.setText("Puede consultar la Ayuda (F1) para más información.");

        jLabel4.setText("Seleccione la política de obtención (Fetch):");

        FetchPolicyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Demand", "Prepaging" }));
        FetchPolicyComboBox.setSelectedItem(null);
        FetchPolicyComboBox.setToolTipText("Especifica cuándo cargar las páginas de un proceso a memoria física (observe ayuda F1).");
        FetchPolicyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FetchPolicyComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Seleccione la política de posicionamiento (Placement):");

        PlacementPolicyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "First available", "Next available" }));
        PlacementPolicyComboBox.setSelectedItem(null);
        PlacementPolicyComboBox.setToolTipText("Especifica si las páginas de un proceso ocuparán el primer lugar disponible o el siguiente después del último frame insertado.");
        PlacementPolicyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlacementPolicyComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("Seleccione la política de reemplazo (Replacement):");

        ReplacementPolicyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Least Recently Used", "Most Recently Used", "First In - First Out", "Clock" }));
        ReplacementPolicyComboBox.setSelectedItem(null);
        ReplacementPolicyComboBox.setToolTipText("Qué debe cumplir una página para ser reemplazada al darse el caso.\n(observar ayuda F1 para conocer qué pasa con cada algoritmo).");
        ReplacementPolicyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReplacementPolicyComboBoxActionPerformed(evt);
            }
        });

        jLabel7.setText("Seleccione la configuración de la gestión del conjunto residente (Resident/Working Set Management):");

        ResidentSetManagementComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tamaño Variable", "Tamaño Fijo" }));
        ResidentSetManagementComboBox.setSelectedItem(null);
        ResidentSetManagementComboBox.setToolTipText("Especifica si un proceso podrá ocupar solamente un número fijo de frames en memoria física o este irá en aumento.");
        ResidentSetManagementComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResidentSetManagementComboBoxActionPerformed(evt);
            }
        });

        jLabel10.setText("Tamaño máximo: ");

        jLabel11.setText("Tamaño inicial: ");

        jLabel12.setText("Crecimiento por reemplazo:");

        FieldCrecimientoPorIteracion.setToolTipText("Cuántos frames en memoria física se le asignarán extra al proceso después de un reemplazo.");
        FieldCrecimientoPorIteracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FieldCrecimientoPorIteracionActionPerformed(evt);
            }
        });

        FieldTamanoMaximo.setToolTipText("Número de frames máximo que podrá utilizar un proceso en memoria física.");

        FieldTamanoInicial.setToolTipText("Número de frames en memoria física que se le asignará al proceso al crearse.");

        javax.swing.GroupLayout PanelWorkingSetVariableLayout = new javax.swing.GroupLayout(PanelWorkingSetVariable);
        PanelWorkingSetVariable.setLayout(PanelWorkingSetVariableLayout);
        PanelWorkingSetVariableLayout.setHorizontalGroup(
            PanelWorkingSetVariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelWorkingSetVariableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FieldTamanoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FieldTamanoMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(FieldCrecimientoPorIteracion, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        PanelWorkingSetVariableLayout.setVerticalGroup(
            PanelWorkingSetVariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelWorkingSetVariableLayout.createSequentialGroup()
                .addGroup(PanelWorkingSetVariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel10)
                    .addComponent(FieldTamanoMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FieldTamanoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(FieldCrecimientoPorIteracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        FieldTamanoFijo.setToolTipText("Número fijo de frames que utilizará el proceso en memoria física.");

        jLabel8.setText("Tamaño:");

        javax.swing.GroupLayout PanelWorkingSetFijoLayout = new javax.swing.GroupLayout(PanelWorkingSetFijo);
        PanelWorkingSetFijo.setLayout(PanelWorkingSetFijoLayout);
        PanelWorkingSetFijoLayout.setHorizontalGroup(
            PanelWorkingSetFijoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelWorkingSetFijoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FieldTamanoFijo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        PanelWorkingSetFijoLayout.setVerticalGroup(
            PanelWorkingSetFijoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelWorkingSetFijoLayout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addGroup(PanelWorkingSetFijoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FieldTamanoFijo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)))
        );

        ReplacementScopeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Global", "Local" }));
        ReplacementScopeComboBox.setSelectedItem(null);
        ReplacementScopeComboBox.setToolTipText("Define si la página de un proceso puede reemplazar a una página de otro en memoria física (observe ayuda F1).");
        ReplacementScopeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReplacementScopeComboBoxActionPerformed(evt);
            }
        });

        jLabel13.setText("Seleccione el tipo de alcance de reemplazo (Replacement Scope):");

        jLabel14.setText("Seleccione la política de limpieza (Cleaning Policy):");

        CleaningPolicyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Demand", "Pre-cleaning" }));
        CleaningPolicyComboBox.setSelectedItem(null);
        CleaningPolicyComboBox.setToolTipText("Cuándo actualizar en memoria virtual las páginas escritas en memoria física.");
        CleaningPolicyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CleaningPolicyComboBoxActionPerformed(evt);
            }
        });

        jLabel15.setText("Seleccione el grado de multiprogramación: ");

        FieldGradoDeMultiprogramacion.setToolTipText("Corresponde al número máximo de procesos que se pueden cargar en memoria virtual simultáneamente.");

        jLabel16.setText("Seleccione la política de selección de procesos: ");

        ProcessSelectionPolicyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "First In - First Out", "Prioridad" }));
        ProcessSelectionPolicyComboBox.setSelectedItem(null);
        ProcessSelectionPolicyComboBox.setToolTipText("No todos los procesos se pueden cargar en memoria, esta política filtra los procesos que podrán ser cargados.");
        ProcessSelectionPolicyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProcessSelectionPolicyComboBoxActionPerformed(evt);
            }
        });

        BotonContinuar.setText("Continuar");
        BotonContinuar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonContinuarActionPerformed(evt);
            }
        });

        jLabel17.setText("Tamaño de Memoria Física: (1-16)");

        FieldTamanoMemFisica.setToolTipText("El número ingresado aquí debe ser entre 1 y 16, pues la memoria física (RAM) siempre tiene un tamaño definido y menor a la cantidad de memoria virtual.");

        jLabel18.setText("MB         Cantidad de bits de las referencias: (24-27)");

        FieldCantidadBitsReferencias.setToolTipText("El offset (tamaño de cada página de la memoria virtual) será siempre de 1MB, por lo que el número a ingresar debe estar entre 24 y 27.\n(Observar ayuda F1).");

        jLabel19.setText("Cantidad de referencias por iteración: ");

        FieldCantidadReferenciasPorIteracion.setToolTipText("El número ingresado en este campo especificará el número de referencias leídas antes de mostrar el estado de las memorias (física y virtual) y el log de eventos.");

        Ayuda.setText("Ayuda");
        Ayuda.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                AyudaMenuSelected(evt);
            }
        });
        Ayuda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AyudaMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                AyudaMousePressed(evt);
            }
        });
        Ayuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AyudaActionPerformed(evt);
            }
        });

        General.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        General.setText("Ayuda General");
        General.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeneralActionPerformed(evt);
            }
        });
        Ayuda.add(General);

        menu.add(Ayuda);

        Creditos.setText("Créditos");
        Creditos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CreditosMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CreditosMousePressed(evt);
            }
        });
        Creditos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreditosActionPerformed(evt);
            }
        });
        Creditos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CreditosKeyPressed(evt);
            }
        });
        menu.add(Creditos);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(PanelWorkingSetVariable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(PanelWorkingSetFijo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1))
                            .addComponent(LBienvenido, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(FetchPolicyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(PlacementPolicyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ReplacementScopeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CleaningPolicyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FieldGradoDeMultiprogramacion, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ProcessSelectionPolicyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(ReplacementPolicyComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ResidentSetManagementComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(FieldTamanoMemFisica, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(FieldCantidadBitsReferencias, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FieldCantidadReferenciasPorIteracion, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BotonContinuar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(281, 281, 281))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LBienvenido, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(FetchPolicyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(PlacementPolicyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(ReplacementPolicyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(ResidentSetManagementComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PanelWorkingSetFijo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PanelWorkingSetVariable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(ReplacementScopeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(CleaningPolicyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(FieldGradoDeMultiprogramacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(ProcessSelectionPolicyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(FieldTamanoMemFisica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(FieldCantidadBitsReferencias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(FieldCantidadReferenciasPorIteracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BotonContinuar))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GeneralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeneralActionPerformed
        AyudaParaConfiguracion help = new AyudaParaConfiguracion();
        help.setVisible(true);
    }//GEN-LAST:event_GeneralActionPerformed

    private void AyudaMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_AyudaMenuSelected

    }//GEN-LAST:event_AyudaMenuSelected

    private void AyudaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AyudaMouseClicked

    }//GEN-LAST:event_AyudaMouseClicked

    private void AyudaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AyudaMousePressed

    }//GEN-LAST:event_AyudaMousePressed

    private void AyudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AyudaActionPerformed

    }//GEN-LAST:event_AyudaActionPerformed

    private void CreditosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CreditosMouseClicked
        JOptionPane.showMessageDialog(new JFrame(),"El presente programa fue diseñado y desarrollado para el curso Infraestructura Tecnológica I, I semestre 2015.\n\nLos estudiantes responsables son:\n- Adrián Siles Masís\n- Mauricio Gamboa Cubero\n- Andrés Pacheco Quesada\n- Josué Espinoza Castro","Créditos",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_CreditosMouseClicked

    private void CreditosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CreditosMousePressed
        JOptionPane.showMessageDialog(new JFrame(),"El presente programa fue diseñado y desarrollado para el curso Infraestructura Tecnológica I, I semestre 2015.\n\nLos estudiantes responsables son:\n- Adrián Siles Masís\n- Mauricio Gamboa Cubero\n- Andrés Pacheco Quesada\n- Josué Espinoza Castro","Créditos",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_CreditosMousePressed

    private void CreditosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreditosActionPerformed

    }//GEN-LAST:event_CreditosActionPerformed

    private void CreditosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CreditosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_CreditosKeyPressed

    private void FetchPolicyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FetchPolicyComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FetchPolicyComboBoxActionPerformed

    private void PlacementPolicyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlacementPolicyComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PlacementPolicyComboBoxActionPerformed

    private void ReplacementPolicyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReplacementPolicyComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ReplacementPolicyComboBoxActionPerformed

    private void ResidentSetManagementComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResidentSetManagementComboBoxActionPerformed
        if (ResidentSetManagementComboBox.getSelectedItem().toString().equals("Tamaño Variable")){
            PanelWorkingSetFijo.setVisible(false);
            PanelWorkingSetVariable.setVisible(true);
        }
        else if (ResidentSetManagementComboBox.getSelectedItem().toString().equals("Tamaño Fijo")){
            PanelWorkingSetVariable.setVisible(false);
            PanelWorkingSetFijo.setVisible(true);
        }
    }//GEN-LAST:event_ResidentSetManagementComboBoxActionPerformed

    private void FieldCrecimientoPorIteracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FieldCrecimientoPorIteracionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FieldCrecimientoPorIteracionActionPerformed

    private void ReplacementScopeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReplacementScopeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ReplacementScopeComboBoxActionPerformed

    private void CleaningPolicyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CleaningPolicyComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CleaningPolicyComboBoxActionPerformed

    private void ProcessSelectionPolicyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProcessSelectionPolicyComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProcessSelectionPolicyComboBoxActionPerformed

    private void BotonContinuarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonContinuarActionPerformed
        //Obtener los valores de configuración
        if (TodosTienenValores()){
            //Validar valores de configuración que no son vacíos
            if (Validar(Main.ListaDeAtributos)){
                //Asignar los valores de Main.ListaDeAtributos a los atributos de configuración que no han sido enlazados (los de comboBox)
                String fetch = (String) Main.ListaDeAtributos.get("Fetch Policy");
                String placement = (String) Main.ListaDeAtributos.get("Placement Policy");
                String replacement = (String) Main.ListaDeAtributos.get("Replacement Policy");
                String residentSet = (String) Main.ListaDeAtributos.get("Resident Set Management");
                String replacementScope = (String) Main.ListaDeAtributos.get("Replacement Scope");
                String cleaning = (String) Main.ListaDeAtributos.get("Cleaning Policy");
                String seleccionProcesos = (String) Main.ListaDeAtributos.get("Política de Selección de Procesos");
                
                if (fetch.equals("Demand")){
                    Main.fetch_demand = true;
                }
                else{
                    Main.fetch_demand = false;
                }
                if (placement.equals("First available")){
                    Main.placement_first_available = true;
                }
                else{
                    Main.placement_first_available = false;
                }
                switch (replacement){
                    case "Least Recently Used":
                        Main.replacement_policy = "LRU";
                        break;
                    case "Most Recently Used":
                        Main.replacement_policy = "MRU";
                        break;
                    case "Clock":
                        Main.replacement_policy = "Clock";
                        break;
                    case "First In - First Out":
                        Main.replacement_policy = "FIFO";
                        break;    
                }
                if (residentSet.equals("Tamaño Fijo")){
                    Main.resident_set_management_fixed = true;
                }
                else{
                    Main.resident_set_management_fixed = false;
                }
                if (replacementScope.endsWith("Global")){
                    Main.replacement_scope_global = true;
                }
                else{
                    Main.replacement_scope_global = false;
                }
                if (cleaning.equals("Demand")){
                    Main.cleaning_demand = true;
                }
                else{
                    Main.cleaning_demand = false;
                }
                if (seleccionProcesos.equals("First In - First Out")){
                    Main.seleccion_de_procesos_FIFO = true;
                }
                else{
                    Main.seleccion_de_procesos_FIFO = false;
                }
                
                //órdenes internas
                VentanaConfiguracion.cargarProcesos();
                
                if (!Main.lista_Procesos.isEmpty()){
                    //Listas las asignaciones. Ahora --> siguiente GUI
                    JOptionPane.showMessageDialog(new JFrame(),"Procesos y configuración cargados.","Éxito",JOptionPane.PLAIN_MESSAGE);
                    this.setVisible(false);
                
                    //órdenes externas
                    FuncionamientoGUI fGUI = new FuncionamientoGUI();
                    fGUI.setVisible(true);
                    MapMemoriaFisica memFisica = new MapMemoriaFisica();
                    memFisica.setVisible(true);
                    MapMemoriaVirtual memVirtual = new MapMemoriaVirtual();
                    memVirtual.setVisible(true);
                    
                    Main.mFisica = memFisica;
                    Main.mVirtual = memVirtual;
                }
            }
            else{
                //Do nothing, ya se hizo en los métodos de validación
            }
        }
        else{
            //Do nothing, ya se hizo en los métodos de validación
        }
    }//GEN-LAST:event_BotonContinuarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaConfiguracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaConfiguracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaConfiguracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaConfiguracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaConfiguracion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Ayuda;
    private javax.swing.JButton BotonContinuar;
    private javax.swing.JComboBox CleaningPolicyComboBox;
    private javax.swing.JMenu Creditos;
    private javax.swing.JComboBox FetchPolicyComboBox;
    private javax.swing.JTextField FieldCantidadBitsReferencias;
    private javax.swing.JTextField FieldCantidadReferenciasPorIteracion;
    private javax.swing.JTextField FieldCrecimientoPorIteracion;
    private javax.swing.JTextField FieldGradoDeMultiprogramacion;
    private javax.swing.JTextField FieldTamanoFijo;
    private javax.swing.JTextField FieldTamanoInicial;
    private javax.swing.JTextField FieldTamanoMaximo;
    private javax.swing.JTextField FieldTamanoMemFisica;
    private javax.swing.JMenuItem General;
    private javax.swing.JLabel LBienvenido;
    private javax.swing.JPanel PanelWorkingSetFijo;
    private javax.swing.JPanel PanelWorkingSetVariable;
    private javax.swing.JComboBox PlacementPolicyComboBox;
    private javax.swing.JComboBox ProcessSelectionPolicyComboBox;
    private javax.swing.JComboBox ReplacementPolicyComboBox;
    private javax.swing.JComboBox ReplacementScopeComboBox;
    private javax.swing.JComboBox ResidentSetManagementComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenuBar menu;
    // End of variables declaration//GEN-END:variables

    private boolean TodosTienenValores() {
        try{
            Map diccionario = new HashMap();
            diccionario.put("Fetch Policy", FetchPolicyComboBox.getSelectedItem());
            diccionario.put("Placement Policy", PlacementPolicyComboBox.getSelectedItem());
            diccionario.put("Replacement Policy", ReplacementPolicyComboBox.getSelectedItem());
            diccionario.put("Resident Set Management", ResidentSetManagementComboBox.getSelectedItem());
            if (!(ResidentSetManagementComboBox.getSelectedItem()==null)){
                if(ResidentSetManagementComboBox.getSelectedItem().toString().equals("Tamaño Fijo")){
                    diccionario.put("Tamaño Fijo", FieldTamanoFijo.getText());
                }
                else{
                    diccionario.put("Tamaño Inicial (Variable)", FieldTamanoInicial.getText());
                    diccionario.put("Tamaño Maximo (Variable)", FieldTamanoMaximo.getText());
                    diccionario.put("Tamaño Crecimiento Por Iteracion (Variable)", FieldCrecimientoPorIteracion.getText());
                }
            }
            diccionario.put("Replacement Scope", ReplacementScopeComboBox.getSelectedItem());
            diccionario.put("Cleaning Policy", CleaningPolicyComboBox.getSelectedItem());
            diccionario.put("Grado de Multiprogramación", FieldGradoDeMultiprogramacion.getText());
            diccionario.put("Política de Selección de Procesos", ProcessSelectionPolicyComboBox.getSelectedItem());
            diccionario.put("Tamaño de Memoria Física", FieldTamanoMemFisica.getText());
            diccionario.put("Bits de las Referencias", FieldCantidadBitsReferencias.getText());
            diccionario.put("Referencias por Iteración", FieldCantidadReferenciasPorIteracion.getText());
            
            if (diccionario.containsValue(null)){
                String valores_nulos = "";
                for (Object key: diccionario.keySet()){
                    if ((diccionario.get(key)==null) || (diccionario.get(key).equals(""))){
                        valores_nulos = valores_nulos + "   - " + key.toString() + "\n";
                    }
                }
                JOptionPane.showMessageDialog(new JFrame(),"Los siguientes valores están vacíos y debe llenarlos para continuar: \n"+valores_nulos,"Advertencia",JOptionPane.WARNING_MESSAGE);
                return false;
            }
            else{
                Main.ListaDeAtributos = diccionario;
                return true;
            }
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(new JFrame(),"Error en la obtención de datos.","Error",JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private boolean Validar(Map ListaDeAtributos) {
        //Gets para validar variables
        
        String tamanoFijo = null;
        String tamanoInicial = null;
        String tamanoMaximo = null;
        String tamanoCrecimiento = null;
        
        if(ListaDeAtributos.get("Resident Set Management").toString().equals("Tamaño Fijo")){
            tamanoFijo = (String) ListaDeAtributos.get("Tamaño Fijo");
            //System.out.println("tamano Fijo = "+tamanoFijo);
        }
        else{
            tamanoInicial = (String) ListaDeAtributos.get("Tamaño Inicial (Variable)");
            tamanoMaximo = (String) ListaDeAtributos.get("Tamaño Maximo (Variable)");
            tamanoCrecimiento = (String) ListaDeAtributos.get("Tamaño Crecimiento Por Iteracion (Variable)");
            //System.out.println("Tamano Inicial = "+tamanoInicial+", tamano Maximo = "+tamanoMaximo+", tamanoCrecimiento = "+tamanoCrecimiento);
        }
        
        String gradoMultiprogramacion;
        String tamanoMemoriaFisica;
        String bitsReferencia;
        String numeroReferenciasPorIteracion;
        
        gradoMultiprogramacion = (String) ListaDeAtributos.get("Grado de Multiprogramación");
        tamanoMemoriaFisica = (String) ListaDeAtributos.get("Tamaño de Memoria Física");
        bitsReferencia = (String) ListaDeAtributos.get("Bits de las Referencias");
        numeroReferenciasPorIteracion = (String) ListaDeAtributos.get("Referencias por Iteración");
        
        //Validacion
        try{
            int gMultiprog = Integer.parseInt(gradoMultiprogramacion);
            int tMemFisica = Integer.parseInt(tamanoMemoriaFisica);
            int bReferencia = Integer.parseInt(bitsReferencia);
            int nReferencias = Integer.parseInt(numeroReferenciasPorIteracion);
            
            if(ListaDeAtributos.get("Resident Set Management").toString().equals("Tamaño Fijo")){
                int tF = Integer.parseInt(tamanoFijo);
                if ((tF <= 0) || (tF >= tMemFisica)){
                    MensajeError("El número ingresado en el campo de tamaño fijo debe ser mayor a 0 y menor a la memoria física.","Error de entrada");
                    return false;
                }
                else{
                    if (((String) ListaDeAtributos.get("Replacement Scope")).equals("Global")){
                        MensajeError("El Replacement Scope no puede ser Global cuando el Resident Set sea de tamaño fijo.","Error de incompatibilidad");
                        return false;
                    }
                    else{
                        Main.tamaño_fijo = tF;
                    }
                }
            }
            else{
                int tInicial = Integer.parseInt(tamanoInicial);
                int tMaximo = Integer.parseInt(tamanoMaximo);
                int tCrecimiento = Integer.parseInt(tamanoCrecimiento);
                if ((tInicial <=0) || (tInicial >= tMaximo) || (tInicial >= tMemFisica)){
                    /*System.out.println("tInicial = "+tInicial);
                    System.out.println("tMaximo = "+tMaximo);
                    System.out.println("tMemFisica = "+tMemFisica);*/
                    MensajeError("El número ingresado en el campo de tamaño inicial debe ser mayor a 0, y menor al tamaño máximo ingresado y a la memoria física.","Error de entrada");
                    return false;
                }
                else{
                    if ((tMaximo <=0) || (tMaximo >= ((int) pow(2,bReferencia - 20)))){
                        //System.out.println("    - tMaximo = "+tMaximo+", tamaño mem virtual = "+((int) pow(2,bReferencia - 20)));
                        MensajeError("El número ingresado en el campo del tamaño máximo debe ser mayor a 0 y menor al tamaño de la memoria física.","Error de entrada");
                        return false;
                    }
                    else{
                        if ((tCrecimiento <=0) || (tCrecimiento >= tMaximo)){
                            MensajeError("El número ingresado en el campo del crecimiento por referencia debe ser mayor a 0 y menor al tamaño máximo.","Error de entrada");
                            return false;
                        }
                        else{
                            Main.tamaño_inicial = tInicial;
                            Main.tamaño_maximo = tMaximo;
                            Main.crecimiento_por_reemplazo = tCrecimiento;
                        }
                    }
                }    
            }
            if (gMultiprog <=0){
                MensajeError("El número ingresado en el campo del grado de multiprogramación debe ser mayor a 0.","Error de entrada");
                return false;
            }
            else{
                if ((tMemFisica < 1) || (tMemFisica > 16)){
                    MensajeError("El número ingresado en el campo de memoria física debe estar entre 1 y 16.","Error de entrada");
                    return false;
                }
                else{
                    if ((bReferencia < 24) || (bReferencia > 27)){
                        MensajeError("El número ingresado como número bits de referencia debe estar entre 24 y 27.","Error de entrada");
                        return false;
                    }
                    else{
                        if (nReferencias <=0){
                            MensajeError("El número ingresado en el campo de cantidad de referencias por iteración debe ser mayor a 0.","Error de entrada");
                            return false;
                        }
                        else{
                            Main.grado_de_multiprogramacion = gMultiprog;
                            Main.tamaño_memoria_fisica = tMemFisica;
                            Main.bits_de_referencias = bReferencia;
                            Main.tamaño_memoria_virtual = (int) pow(2,Main.bits_de_referencias - 20);
                            Main.numero_referencias_por_iteracion = nReferencias;
                            return true;
                        }
                    }
                }
            }
        }
        catch (Exception e){
            MensajeError("En los cuadros de texto requeridos hay al menos un valor que no es un número entero.","Valor no válido");
            return false;
        }
    }
    
    public static void MensajeError(String texto, String titulo){
        JOptionPane.showMessageDialog(new JFrame(),texto,titulo,JOptionPane.ERROR_MESSAGE);
    }

    public static void cargarProcesos() {
        //validar y cargar los procesos
        for (String proceso : Main.lineas_archivos_procesos){
            String[] procesoSeccionado = proceso.split(",");
            /*System.out.println("------------------------");
            for (String s : procesoSeccionado){
                System.out.print(s+",");
            }
            System.out.println("Length = "+procesoSeccionado.length);
            System.out.println("------------------------");*/
            if (Validar_Proceso(procesoSeccionado)){
                //System.out.println("Proceso validado, length = "+procesoSeccionado.length);
                boolean blocked;
                blocked = Integer.parseInt(procesoSeccionado[3]) != 0;
                if (procesoSeccionado.length == 4){//sin prioridad
                    if (Main.seleccion_de_procesos_FIFO){
                        Proceso p = new Proceso(Integer.parseInt(procesoSeccionado[0]),procesoSeccionado[1],Integer.parseInt(procesoSeccionado[2]),blocked);
                        Main.lista_Procesos.add(p);
                        //System.out.println("Proceso "+procesoSeccionado[1]+" creado");
                    }
                    else{
                        //System.out.println("Politica: "+Main.seleccion_de_procesos_FIFO);
                        JOptionPane.showMessageDialog(new JFrame(),"El proceso: "+procesoSeccionado[1]+" no cumple con el formato requerido, necesita 5 parámetros en vez de 4.","Error al cargar los procesos",JOptionPane.ERROR_MESSAGE);
                    }
                }
                else{//con prioridad
                    if (!Main.seleccion_de_procesos_FIFO){
                        Proceso p = new Proceso(Integer.parseInt(procesoSeccionado[0]),procesoSeccionado[1],Integer.parseInt(procesoSeccionado[2]),blocked,Integer.parseInt(procesoSeccionado[4]));
                        Main.lista_Procesos.add(p);
                        //System.out.println("Proceso "+procesoSeccionado[1]+" creado");
                    }
                    else{
                        //System.out.println("Politica: "+Main.seleccion_de_procesos_FIFO);
                        JOptionPane.showMessageDialog(new JFrame(),"El proceso: "+procesoSeccionado[1]+" no cumple con el formato requerido, necesita 4 parámetros en vez de 5.","Error al cargar los procesos",JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(new JFrame(),"El proceso: "+procesoSeccionado[1]+" no cumple con el formato requerido.","Error al cargar los procesos",JOptionPane.ERROR_MESSAGE);
            }
        }
        //si el grado de programacion es menor al numero de procesos cargados, seleccionar los de mayor prioridad, o los primeros en entrar
        if (Main.grado_de_multiprogramacion < Main.lista_Procesos.size()){
            List<Proceso> nuevaListaProcesos = new LinkedList<Proceso>();
            if (Main.seleccion_de_procesos_FIFO){
                for (int i = 0; i < Main.grado_de_multiprogramacion ; i++){
                    nuevaListaProcesos.add(Main.lista_Procesos.get(i));
                }
                Main.lista_Procesos = nuevaListaProcesos;
            }
            else{
                for (int i = 0; i < Main.grado_de_multiprogramacion ; i++){
                    Proceso p = Proceso.SeleccionarMayorPrioridad(Main.lista_Procesos);
                    nuevaListaProcesos.add(p);
                    Main.lista_Procesos.remove(p);
                }
                Main.lista_Procesos = nuevaListaProcesos;
            }
        }
        //Cargar memoria virtual
        CargarMemoriaVirtual();
    }
    private static boolean Validar_Proceso(String[] p){
        //System.out.println("p.length = "+p.length);
        if (p.length == 4){//sin prioridad
            //System.out.println("Sin prioridad");
            try{
                int id = Integer.parseInt(p[0]);
                int tamano = Integer.parseInt(p[2]);
                int bloqueo = Integer.parseInt(p[3]);
                if ((Proceso.yaEsProceso(id, p[1])) || (!((bloqueo == 0) || (bloqueo == 1)))){
                    //System.out.println("yaEsProceso o bloqueo es otro num");
                    return false;
                }
                else{
                    //System.out.println("NO EsProceso y bloqueo 0 o 1");
                    return true;
                }
            }
            catch(Exception e){
                //System.out.println("Catch del length = 4");
                return false;
            }
        }
        else if (p.length == 5){//con prioridad
            try{
                //System.out.println("Con prioridad");
                int id = Integer.parseInt(p[0]);
                int tamano = Integer.parseInt(p[2]);
                int bloqueo = Integer.parseInt(p[3]);
                int prioridad = Integer.parseInt(p[4]);
                //System.out.println("todos ints");
                if ((Proceso.yaEsProceso(id, p[1])) || (!((bloqueo == 0) || (bloqueo == 1)))){
                    //System.out.println("yaEsProceso o bloqueo es otro num");
                    return false;
                }
                else{
                    //System.out.println("NO EsProceso y bloqueo 0 o 1");
                    return true;
                }
            }
            catch(Exception e){
                //System.out.println("Catch del length = 5");
                return false;
            }
        }
        else{
            return false;
        }
    }
}
